from matplotlib.pyplot import *  # permet de tracer un pgraphe
import numpy as np              # permet de faire des calculs sur des listes

# lecture des mesures obtenues avec le gyroscope
# indiquer ci-dessous le chemin du fichier qui contient les mesures
t,omegax,omegay,omegaz,norme = np.genfromtxt('mesures.csv', delimiter=';',unpack=True)

# indiquer ci-dessous le nombre de lignes d'en-tete
lignes_intro=1
t=np.delete(t,lignes_intro-1)
omega=np.delete(omegax,lignes_intro)

# Calcul de theta
angles=[0]  # on crée d'abord une grandeur "angle" qui n'est pas égale à 0
            # lorsque le pendule passe par la verticale.
total=0

for i in range(1,len(t)):
    angle=angles[i-1]+omega[i]*(t[i]-t[i-1])
    total=total+angle
    angles.append(angle)
moyenne=total/len(t)
print(moyenne) # la valeur moyenne de cet angle n'est pas nulle

thetas=angles-moyenne      # on crée une grandeur "theta" qui est égale à 0
                           # lorsque le pendule passe par la verticale.

#calcul de l'énergie cinétique
m=0.163 # masse en kg
l=0.409 # longeur du pendule en m
g= 9.81 # intensité de pesanteur SI
Ec= 0.5*m*(l*omega)**2

#calcul de l'énergie potentielle de pesanteur
Epp=m*g*l*(1-np.cos(thetas))   # initialisation de la liste de l'énergie potentielle de pesanteur

#calcul de l'énergie mécanique
Em=Ec+Epp

# Tracés
subplot(211)
xlabel("temps (s)")
plot(t,omega,label="vitesse angulaire (rad/s)")
plot(t,thetas,label="angle theta (rad)")
legend()

subplot(212)
xlabel("temps (s)")
plot(t,Ec,label="énergie cinétique")
plot(t,Epp,label="énergie potentielle de pesanteur")
plot(t,Em,label="énergie mécanique du pendule")
legend()
show()



